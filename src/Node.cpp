/*	PureBasic Engine3D licence
*	--------------------------
*
*	MIT License
*
*	Copyright (c) 2017 Jerome Ortali
*
*	Permission is hereby granted, free of charge, to any person obtaining a copy
*	of this software and associated documentation files (the "Software"), to deal
*	in the Software without restriction, including without limitation the rights
*	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*	copies of the Software, and to permit persons to whom the Software is
*	furnished to do so, subject to the following conditions:
*
*	The above copyright notice and this permission notice shall be included in all
*	copies or substantial portions of the Software.
*
*	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*	SOFTWARE.
*/
#include "Node.hpp"


///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void*) uh3_CreateNodeComponent(Urho3D::Node* node, NodeComponent component) {
	switch (component)
	{
	case camera: {
		Urho3D::Camera * c = node->CreateComponent < Urho3D::Camera>();
		c->SetFarClip(2000);
		return c; }
		break;
	case staticModel:
		return node->CreateComponent<Urho3D::StaticModel>();
		break;
	case animatedModel:
		return node->CreateComponent<Urho3D::AnimatedModel>();
		break;
	case skybox:
		return node->CreateComponent < Urho3D::Skybox>();
		break;
	case light: 
		return node->CreateComponent < Urho3D::Light>();
		break;
	case terrain:
		return node->CreateComponent<Urho3D::Terrain>();
		break;
	case scriptInstance:
		return (void*)node->CreateComponent<Urho3D::ScriptInstance>();
		break;
	default:
		return nullptr;
	}
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(Urho3D::Node*) uh3_GetNodeChildByName(Urho3D::Node* node, const unsigned short* name, int recursive) {
	return node->GetChild(Urho3D::String((const wchar_t*)name), recursive);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(Urho3D::Node*) uh3_GetNodeChildByID(Urho3D::Node* node, unsigned int id) {
	return node->GetChild(id);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeTemporary(Urho3D::Node* node, int state) {
	node->SetTemporary((bool)state);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodePosition(Urho3D::Node* node, float x, float y, float z) {
	node->SetPosition(Urho3D::Vector3(x, y, z));
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_NodeTranslate(Urho3D::Node* node, float x, float y, float z, int mode) {
	node->Translate(Urho3D::Vector3(x, y, z), (Urho3D::TransformSpace)mode);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeRotation(Urho3D::Node* node, float x, float y, float z) {
	node->SetRotation(Urho3D::Quaternion(x, y, z));
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_NodeRotate(Urho3D::Node* node, float x, float y, float z, int mode) {
	node->Rotate(Urho3D::Quaternion(x,y,z), (Urho3D::TransformSpace)mode );
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeDirection(Urho3D::Node* node, float x, float y, float z) {
	node->SetDirection(Urho3D::Vector3(x, y, z));
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeUniformScale(Urho3D::Node* node, float scale) {
	node->SetScale(scale);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeScale(Urho3D::Node* node, float x, float y, float z) {
	node->SetScale(Urho3D::Vector3(x, y, z));
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeWorldPosition(Urho3D::Node* node, float x, float y, float z) {
	node->SetWorldPosition(Urho3D::Vector3(x, y, z));
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_NodeLookAt(Urho3D::Node* node, float x, float y, float z, float ux, float uy, float uz, int mode) {
	node->LookAt(Urho3D::Vector3(x, y, z), Urho3D::Vector3(ux, uy, uz), (Urho3D::TransformSpace)mode);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodePitch(Urho3D::Node* node, float pitch, int mode) {
	node->Pitch(pitch,(Urho3D::TransformSpace)mode);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeYaw(Urho3D::Node* node, float yaw, int mode) {
	node->Yaw(yaw, (Urho3D::TransformSpace)mode);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeRoll(Urho3D::Node* node, float roll, int mode) {
	node->Roll(roll, (Urho3D::TransformSpace)mode);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodePositionX(Urho3D::Node* node) {
	return node->GetPosition().x_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodePositionY(Urho3D::Node* node) {
	return node->GetPosition().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodePositionZ(Urho3D::Node* node) {
	return node->GetPosition().z_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeRotationX(Urho3D::Node* node) {
	return node->GetRotation().EulerAngles().x_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeRotationY(Urho3D::Node* node) {
	return node->GetRotation().EulerAngles().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeRotationZ(Urho3D::Node* node) {
	return node->GetRotation().EulerAngles().z_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeDirectionX(Urho3D::Node* node) {
	return node->GetDirection().x_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeDirectionY(Urho3D::Node* node) {
	return node->GetDirection().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeDirectionZ(Urho3D::Node* node) {
	return node->GetDirection().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldDirectionX(Urho3D::Node* node) {
	return node->GetWorldDirection().x_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldDirectionY(Urho3D::Node* node) {
	return node->GetWorldDirection().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldDirectionZ(Urho3D::Node* node) {
	return node->GetWorldDirection().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldPositionX(Urho3D::Node* node) {
	return node->GetWorldPosition().x_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldPositionY(Urho3D::Node* node) {
	return node->GetWorldPosition().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldPositionZ(Urho3D::Node* node) {
	return node->GetWorldPosition().z_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldRotationX(Urho3D::Node* node) {
	return node->GetWorldRotation().EulerAngles().x_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldRotationY(Urho3D::Node* node) {
	return node->GetWorldRotation().EulerAngles().y_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(float) uh3_GetNodeWorldRotationZ(Urho3D::Node* node) {
	return node->GetWorldRotation().EulerAngles().z_;
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(Urho3D::Node*) uh3_NodeCreateChild(Urho3D::Node* node, const unsigned short* name, NodeType type) {
	return node->CreateChild(Urho3D::String((const wchar_t*)name), (Urho3D::CreateMode)type);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(Urho3D::Node*) uh3_NodeCreateTemporaryChild(Urho3D::Node* node, const unsigned short* name, NodeType type) {
	return node->CreateChild(Urho3D::String((const wchar_t*)name), (Urho3D::CreateMode)type);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_NodeAttach(Urho3D::Node* nodeParent, Urho3D::Node* nodeChild) {
	nodeParent->AddChild(nodeChild);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_NodeRemoveChild(Urho3D::Node* node, Urho3D::Node* nodeToRemove) {
	node->RemoveChild(nodeToRemove);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_NodeRemoveAllChild(Urho3D::Node* node) {
	node->RemoveAllChildren();
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_NodeRemoveChildren(Urho3D::Node* node, int replicated, int local, int recursive) {
	node->RemoveChildren((bool)replicated, (bool)local, (bool)recursive);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeParent(Urho3D::Node* node, Urho3D::Node* parent) {
	node->SetParent(parent);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeEnabled(Urho3D::Node* node, int state) {
	node->SetEnabled((bool)state);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
PB_FUNCTION(void) uh3_SetNodeDeepEnabled(Urho3D::Node* node, int state) {
	node->SetDeepEnabled((bool)state);
}

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////